Gray Houston
12/4/15
CS 354

This is the XINU implementation for lab 5. It uses the standard implementation for lab 4 question 2 as described in the TA notes. The files edited to include this implementation will be included in the list of files edited.


Files Changed
-------------
process.h
- added callback function pointer and signal variable to the process table
- added entry so that cpu usage is stored in the process table
- added entry to store the amount of CPU usage which activates the MYSIGXCPU handler

mysignal.h
- created this file to hold constant signal values

xinu.h
- added include for mysignal.h and alarmQueue.h header files

prototypes.h
- added function prototypes for the registercb and registercbsig functions and all of the alarm queue functions

alarmQueue.h
- made separate queue for alarm signal handlers; based on the normal queue operations

clock.h
- added extern reference to alarmq (the variable for the alarm queue)

resched.c
- added functionality so that the proper callback function is executed for the correct signal if it exists immediately after process is context switched back on to the processor

registercb.c
- created the system call like in TA notes; it's super simple
- if it's the alarm signal, the process is placed into the alarm queue
- if it's the CPU usage signal, the appropiate table fields are initialized

registercbsig.c
- created this system call that implements the signal handling functionality as described in the lab question 1 specification

create.c
- initialize added process table entries for the alarm queue in the create function
- initialize CPU time to 0 in process table
- initialize usageLimit variable for each process table entry

initialize.c
- added print statement to ready loop of null process
- all entries in the process table, including null process, are initialized to have a null callback function, 0 signal handler value, 0 CPU time used, and 0 value for the usageLimit variable

alarmQueue.c
- implemented enqueue, dequeue, getfirst, getlast, getitem, and newqueue functions for the alarm queue

ainsertd.c
- added functionality to time delay insert items into the alarm queue

clkinit.c
- initialized the alarm queue right after the sleep queue

clkhandler.c
- update the alarm queue every millisecond when the clock handler is invoked
- updates the amount of time each process has spent on the CPU
- added execution of CPU usage signal handler

main.c
- testing my implementation

kprintf.c
- disabled interupts during function so that debugging output wouldn't be scrambled

